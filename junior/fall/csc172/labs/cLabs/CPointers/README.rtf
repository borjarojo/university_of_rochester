{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Borja Rojo\
brojo@u.rochester.edu\
CSC 172\
Lab 7\
\
Partner: Daniel Saltz\
\
I used gcc on my mac to program this lab. Use the terminal and the command\
\
gcc -o CPointers CPointers.c\
\
to compile. Then to run it, use\
\
./CPointers Borja Murray Daniel Roy\
\
Code: CPointers.c\
\
CPointers.c holds my code for the lab. It has mystrcmp(), mystrcat(), mystrcpy(), and main() methods that execute the directions on the lab.\
\
mystrcmp() takes two strings in the form of char pointers and iterates through the strings comparing each character. It does this until either the end is reached of the first string entered, to a difference in the strings is found. If a difference is found, the value of the current char of the second string is subtracted from the current char of the second string, and returned.\
\
mystrcat() takes to strings in the form of char pointers and concatenates the second string onto the first. It does this by iterating through the char sequence of the first string until it reaches the end, then it begins to copy the second string to the end of the first string.\
\
mystrcpy() takes two strings and copies the first string to the second string. It does this by iterating through the char pointers and copying the chars until the terminating char is reached. This works because once the terminating char is copied, the rest of the string, if there is extra will never be reached. Also, if there weren\'92t an equal amount of letters, gaps can be filled in too.\
}