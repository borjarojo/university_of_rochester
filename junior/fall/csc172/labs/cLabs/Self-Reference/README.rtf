{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Borja Rojo\
brojo@u.rochester.edu\
\
Partner: Daniel Saltz\
\
Code: selfRef.c\
\
selfRef.c contains all my code for the Self-Reference in C lab\
\
This lab is an exercise in building a linked list with some methods that can be done on the list. A struct called Node is used that holds an int and a pointer to a new Node called next. Four methods are used, insert(), printList(), lookup(), and delete().\
\
insert() takes an int and a pointer to a Node pointer and inserts a Node to the end of the list with the value of the int as its value.\
\
printList() takes a pointer to a Node pointer and recursively prints the values of Nodes along the list.\
\
lookup() takes an int and a pointer to a Node pointer and traverses the list, comparing the passed int to the int values of the nodes. When a match is found, it will return TRUE, as defined at the beginning of the program. Otherwise, it returns FALSE, also defined at the beginning of the program.\
\
delete() takes an int and a pointer to a Node pointer. It traverses the list and compares the passed int to the values of the Nodes until it finds a match, If it does, it will set the current node to the next node, circumventing the current node. If not, it returns void.}