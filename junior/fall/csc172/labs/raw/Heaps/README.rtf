{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Borja Rojo\
Partner: Daniel Saltz\
brojo@u.rochester.edu\
\
Contents: Main.java, Heap.java, MyHeap.java\
\
Main.java is a test class.\
\
Heap.java is the interface for the heap.\
\
MyHeap.java is my implantation of the heap.\
\
size() is a method that returns the size of the heap. This is concidered to be the total elements in the heap, not the size of the array storing the heap.\
\
isEmpty() is a method that returns true if the heap is empty, and false otherwise. This is done by running through the heap array and checking if there are non-ill elements. If any of the elements in the array is not null, then there is something in the array, so return false. Otherwise, every element is null, so return true.\
\
insert() inserts an item into the heap. This is done by first checking if there is enough space in the heap for another item, and then bubbling up the entry from the bottom.\
\
enlarge() is the method I used to check if the array needs to be expanded or not. If the size is 1 less than the size of the array, the heap is full, so then it creates a new heap of the double the size. Then, the old heap is copied into the new heap, and the rest of insertion proceeds.\
\
bubbleUp() is the iconic heap insertion method. This holds a hole at the next available spot in the heap. Then, it compares the item to be inserted\'92s value with the parent of the holes spot. If the item is larger than the parent, the item is inserted in the hole. If not, the parent is copied into the hole, and that parent\'92s parent is checked against the item. This is done until an adequate spot is found, or the top is reached.\
\
deleteMin() deletes and returns the minimum item in the heap. By design, this is the item at the top of the heap. There is bubbleDown() method used to keep the integrity of the heap.\
\
bubbleDown() takes hole at the top of the heap and compares its children together to see which should fill its place. Which ever is smaller fills its place, and the smaller item is then considered in the new hole. Theses done until the bottom is reached, keeping the hierarchy go the heap in tacked.\
\
heapify() is a method that takes an array of items and turns them into a heap. It make comparisons to judge whether or not a bubbleDown() on the heap would be necessary. This is like a smart insertion, where reordering is done only when need be.\
\
}