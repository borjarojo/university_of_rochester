{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Borja Rojo\
brojo@u.rochester.edu\
\
Partner: Daniel Saltz\
\
Contents in src: DoubleNode.java, MainTest.java, MyQueue.java, MyStack.java, Node.java, Queue.java, Stack.java\
\
The files in the src are the classes that let me implement the Queue and Stack, as well as the test class with all the test cases for both the Stack and Queue I\'92ve implemented.\
\
This lab was an exercise in constructing a stack and queue. Each is a data structure that holds items in a list. The stack is a LIFO type of list, where the last item stored is the first to be removed. The queue is a FIFO, where the first item stored is the first to be removed. LIFO and FIFO stand for \'93Last In, First Out\'94 and \'93First In, First Out\'94, respectively.\
\
The methods used for the Stack are called push(), pop(), and peek(). push() inserts a data piece onto the stack, pop() removes and returns the data piece on top of the stack, and peek() only returns the data on top of the stack.\
\
The methods used for the Queue are called enqueue(), dequeue(), and peek(). enqueue inserts data to the back of the queue, dequeue() returns and removes data from the front of the queue, and peek() only returns data from the front of the queue.\
}