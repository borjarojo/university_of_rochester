{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Borja Rojo\
brojo@u.rochester.edu\
\
Contents:\
\
Codebreaker.java, Mastermind.java, MastermindMain.java\
\
Codebreaker.java contains my code for the object that solves the Mastermind puzzle. It has the 4 required methods. \
\
The constructor instantiates the codebreaker to contain the tokenColors, the positions, all the possible codes for that combination of token colors and positions, a set of possible remaining guesses from those generated codes, a null code to signify an invalid guess, and a secret code, randomly generated to demonstrate that solver works (just in case there is human error in the response).\
\
There is a nextMove() method that returns an array of Strings containing the next guess the codebreaker would make. This was used mostly to output the current guess, not as a computational tool. You can check in my code for all the sub methods I used, such as a method similar to nextMove() but returns an array of ints instead.\
\
The response() method takes two ints and evaluates them as the black and white pegs, then uses them to trim the possible guesses. This is algorithm used\
\
1. Make a guess\
2. Receive a corresponding black/white pegs combo\
3. Assume that any code that can can be the secret code would get the same response if the JUST guessed code was compared to it. Use this assumption to go through every possible guess (generated in the constructer) and compare those codes to the JUST guessed code. Any code that receives a different response is deleted as a possible guess\
4. set the next guess as the next possible code. All possible codes are kept track of in the guesses[] array\
\
The response() method corresponds specifically to step 3. Steps 1 and 2 correspond with my compareGuesses() method. Step 4 corresponds with my setNextGuess() method.\
\
The last required method is a reset method called newGame(). It essentially reruns the constuctor, resetting all the global parameters fresh so that evaluation can be rerun.\
\
MastermindMain.java holds input methods and general methods that run two kinds of game types: an automatic and human. One shows the math automatically, without human input, the other can be played against a Code Master, which would be the human.}