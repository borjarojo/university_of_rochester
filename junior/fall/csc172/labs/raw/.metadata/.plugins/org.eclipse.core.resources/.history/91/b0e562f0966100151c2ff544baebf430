

public class Codebreaker implements Mastermind {
	
	String[] colors;
	int pos;
	int totalGuess;
	
	int[][] codes;
	int[][] guesses;
	
	public Codebreaker(String[] tokencolors, int positions){
		colors = tokencolors;
		pos = positions;
		totalGuess = (int) Math.pow(colors.length, pos);
		//Create an array that can hold all of the possible solutions
		codes = new int[totalGuess][pos];
		
		/* Fill array
		 * I used the algorthim of transforming
		 * one number of a certain base to the 
		 * base of another number. The base is 
		 * set to be the color amount, and because
		 * of how the system is set, the numbers
		 * run from 0 to the end of the array.
		 */
		for(int i = 0; i < totalGuess; i++){
			int x = i;
			int quad;
			int quo;
			for(int j = 0; j < pos; j++){
				quad = x % colors.length;
				quo = x / colors.length;
				codes[i][j] = quad;
				x = quo;
			}
		}
		
	}

	public void response(int colorsRightPositionWrong,
			int positionsAndColorRight) {
		// TODO Auto-generated method stub

	}

	public void newGame() {
		// TODO Auto-generated method stub

	}

	public String[] nextMove() {
		// TODO Auto-generated method stub
		return null;
	}
	
	public void printGuesses(){
		for(int i = 0; i < totalGuess; i++){
			for(int j = 0; j < pos; j++){
				System.out.print(codes[i][j] + " ");
			}
			System.out.println();
		}
	}
}
