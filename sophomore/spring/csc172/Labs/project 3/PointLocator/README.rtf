{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Borja Rojo\
brojo@u.rochester.edu\
CSC172\
4/11/15\
\
\
\
Project 3\
\
Files: PointLocator.java, Node.java, Point.java., Line.java, BST.java, input.txt, multipleIntersections.txt, oneIntersection.txt, sameSection.txt\
\
To run a test file, just change the name of the input file in the main method in the PointLocator.java class to the name of the test file that you want to run.\
\
TESTFILES: multipleIntersections.txt, oneIntersection.txt, sameSection.txt\
\
BST.java Class:
\b \

\b0 This class holds a root node and methods that correspond to a standard BST. The insert method takes a Line, compares it with the data at the node to see if it should go left or right, and executes correspondingly.\
\
Node.java Class:
\b \

\b0 This class holds the code to insert on a node and the evaluation of how to properly insert. The method of which way to insert Lines is to check whether or not the Line being inserted is Counter-clock wise or clockwise of the data Line, and goes left or right respectively depending on the result. if the evaluation shows that the inserted line is crossed, then the insert goes both to the left and right of the data Line node. The insert method uses the ccw method to determine on which side of the BST tree to insert the new points. \
\
Line.java Class:\
This class holds data for two points, which is a total of 4 coordinates. They can be represented by either doubles of strings, which then get correspondingly casted.\
\
Point.java Class:\
This class holds a basic Point, with only two parameters for the x and y axis.\
\
PointLocator.java Class:
\b \

\b0 This class holds my main method. It uses the in.txt file for the data and the office.txt for the output results.\
\
\
Degenerate Cases:\
I was not able to handle many degenerate cases. However, I did think about the various cases that I would ideally like my program to gracefully handle. Here are those cases.\
\
-Input that contains only one point (as opposed to two points that make up a line). When parsing the input, there needs to be the correct amount of points in the input file, otherwise my program will generate an error.\
\
-If two identical lines were inserted inserted, my program cannot account for that.\
\
-If three lines intersect one point, this could create problems for my program.\
\
\
Running the program: \
Open eclipse, and save each of the java files in a new Java Project. Then, drag the input text file into the java project. The input file must be named input.txt. Then click execute and the program will run.\
\

\b \
}