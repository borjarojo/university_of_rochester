{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Borja Rojo\
brojo@u.rochester.edu\
CSC 172\
Daniel Saltz\
\
Contents: The contents of my file include my cvs files with the raw data, my Microsoft Office files with the compiled data, my Pdf of the plots, and my code. My code is in the src folder and is named SortTest.java. If you want to run it, compile in the command line and run.\
\
READ\\/\\/\\/\\/ thought this was very clever, please consider for extra credit\
\
I collected the data for this lab by using the command line to output the data of my code into .csv files.  This way, I could sample a large number of points and not have to worry about entering them all into data. \
\
Format:\
time 1, count 1, time 2, count 2, time 3, count 3  <-first array size\
time 1, count 1, time 2, count 2, time 3, count 3  <-second array size\
time 1, count 1, time 2, count 2, time 3, count 3  <-third array size\
\'85\
\
________________________________________________________________________________\
\
This lab was an exercise in testing the sorting efficiency of certain sorting methods, namely Bubble Sort, Insertion Sort, Shell Sort (with Hibbard\'92s increments) and the standard Array.sort(). Bubble Sort is the first sort to have been thought of and has a O(n^2) on average, which is not very good at all. The second sort tested was Insertion Sort, which has a O(n^2) as well. The third sort tested was Shell Sort which has a O(n^(3/2) with this interval, on average. The fourth sort tested was Arrays.sort() from the java.util.Arrays library that has a O(n*log(n)).\
\
}